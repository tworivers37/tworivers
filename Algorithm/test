======================================================================
#include<iostream>
using namespace std;

int bs1(int *arr,int len,int t){
   int first=0;
   int last=len-1;

   while(first<=last){
      int mid=(first+last)/2;
      if(arr[mid]==t) return mid;
      else if(arr[mid]>t) last=mid-1;
      else if(arr[mid]<t) first=mid+1;
   }
   return -1;
}

int bs2(int *arr,int first,int last,int t){
   if(first>last) return -1;
   int mid=(first+last)/2;
   if(arr[mid]==t) return mid;
   else if(arr[mid]>t) bs2(arr,first,mid-1,t);
   else if(arr[mid]<t) bs2(arr,mid+1,last,t);
}

int fac1(int n,int m){
   if(n==m) return n;
   else{
      int mid=(m-n)/2;
      int x=fac1(n,mid+n);
      int y=fac1(mid+n+1,m);
      return x*y;
   }
}

int fibo1(int n){
   if(n<3) return n-1;
   /*if(n==1) return 0;
   if(n==2) return 1;*/
   return fibo1(n-1)+fibo1(n-2);
}

int fibo2(int n){
   int i,f1=0,f2=1,tmp;
   if(n<3) return n-1;
   for(int i=0;i<n-2;++i){
      tmp=f1+f2;
      f1=f2;
      f2=tmp;
   }
   return f2;
}

//tail-end recursion
int _fibo3(int n,int a,int b){
   if(n==0) return a;
   else return _fibo3(n-1,b,a+b);
}
int fibo3(int n){
   return _fibo3(n,0,1);
}

int fibo4(int n){
   int *arr=new int[n+1];
   arr[1]=0;
   arr[2]=1;
   for(int i=3;i<=n;++i) arr[i]=arr[i-2]+arr[i-1];
   return arr[n];
}

int *arr=new int[100];
int fibo5(int n){
   if(n==1) return 0;
   if(n==2) return 1;
   if(arr[n]!=-1) return arr[n];
   return arr[n]=fibo5(n-2)+fibo5(n-1);
}

int main(){
   
   return 0;
}
==============================================================================
//#include<iostream>
//using namespace std;
//
//struct MyData{
//   //지정할 데이터 및 생성자 설정
//};
//
//class Node{
//private:
//   Node*next;
//   Node*prev;
//
//   MyData *data;
//   int(*equalFunc)(MyData*,MyData*); //같으면 0, 왼쪽이크면 -1, 오른쪽이 크면 +1
//public:
//   Node();
//   Node(MyData*);
//   ~Node();
//   Node* getPrevNode();
//   Node* getNextNode();
//   MyData* getData();
//
//   void setData(MyData*);
//   void setPrevNode(Node*);
//   void setNextNode(Node*);
//   void setEqualFunc(int(*equalFunc)(MyData*,MyData*));
//   int(*getEqualFunc())(MyData*,MyData*){ return equalFunc; } //비교를 위한 함수 포인터
//};
//Node::Node(){
//   next=nullptr;
//   prev=nullptr;
//   data=nullptr;
//}
//Node::~Node(){
//}
//Node::Node(MyData*data){
//   this->data=data;
//}
//void Node::setEqualFunc(int(*equalFunc)(MyData*,MyData*)){
//   this->equalFunc=equalFunc;
//}
//void Node::setData(MyData* data){
//   this->data=data;
//}
//void Node::setNextNode(Node*node){
//   this->next=node;
//}
//void Node::setPrevNode(Node*node){
//   this->prev=node;
//}
//MyData* Node::getData(){
//   return this->data;
//}
//Node* Node::getNextNode(){
//   return this->next;
//}
//Node* Node::getPrevNode(){
//   return this->prev;
//}
//
//class List{
//   private:
//      Node *head; //head->next 가 데이터가 있는 첫 노드, head->prev는 맨 마지막 노드
//      int cnt;
//   public:
//      List(int(*equalFunc)(MyData*,MyData*));
//      ~List();
//      int GetCount() const;
//      void Clear();
//      void Add(Node*node);
//      void Remove(Node*node);
//      const Node* Find(MyData* data) const;
//};
//List::List(int(*equalFunc)(MyData*,MyData*)){
//   head=new Node();
//   head->setNextNode(nullptr);
//   head->setPrevNode(nullptr);
//   head->setData(nullptr);
//   head->setEqualFunc(equalFunc);
//   cnt=0;
//}
//List::~List(){}
//int List::GetCount() const{
//   return cnt;
//}
//void List::Add(Node*node){
//   if(head->getPrevNode()==nullptr){
//      head->setNextNode(node);
//      head->setPrevNode(node);
//
//      node->setPrevNode(head);
//      node->setNextNode(head);
//   }
//   else{
//      head->getPrevNode()->setNextNode(node);
//      node->setPrevNode(head->getPrevNode());
//      node->setNextNode(head);
//      head->setPrevNode(node);
//   }
//   ++cnt;
//}
//void List::Remove(Node*node){
//   Node*tmp=head->getNextNode();
//
//   if(GetCount()==0){
//      cout<<"추가된 Node가 없음"<<endl;
//      return;
//   }
//   else{
//      Node* findNode=const_cast<Node*>(Find(node->getData()));
//      if(findNode!=nullptr){
//         findNode->getPrevNode()->setNextNode(findNode->getNextNode());
//         findNode->getNextNode()->setPrevNode(findNode->getPrevNode());
//         delete findNode;
//         --cnt;
//         cout<<"삭제 완료"<<endl;
//         return;
//      }
//   }
//   cout<<"삭제 할 Node 없음"<<endl;
//}
//void List::Clear(){
//   Node*del=head->getNextNode();
//   head->setNextNode(nullptr);
//   head->setPrevNode(nullptr);
//
//   int delCnt=GetCount();
//   for(int i=0;i<delCnt;++i){
//      Node*delNext=del->getNextNode();
//      Remove(del);
//      del=delNext;
//   }
//}
//const Node* List::Find(MyData* data) const{
//   Node *find=head->getNextNode();
//   for(int i=0;i<cnt;++i){
//      if(head->getEqualFunc()(find->getData(),data)!=0) find=find->getNextNode();
//      else return find;
//   }
//   cout<<"찾는 대상 없음"<<endl;
//   return nullptr;
//}
//
//
////int eq(MyData* a,MyData *b){
////   return a->data-b->data;
////}
//int main(){
//   /*Node *node1=new Node(new MyData(10));
//   Node *node2=new Node(new MyData(11));
//   Node *node3=new Node(new MyData(12));
//   Node *node4=new Node(new MyData(13));
//   Node *node5=new Node(new MyData(14));
//
//   List *list=new List(eq);
//   list->Add(node1);
//   list->Add(node2);
//   list->Add(node3);
//   list->Add(node4);
//   list->Add(node5);
//
//   cout<<list->GetCount()<<endl;
//   
//   Node *f=const_cast<Node*>(list->Find(new MyData(13)));
//   cout<<f->getData()->data<<endl;
//   cout<<f->getNextNode()->getData()->data<<endl;
//   cout<<f->getPrevNode()->getData()->data<<endl;
//   
//   list->Remove(new Node(new MyData(13)));
//
//   
//   list->print();
//
//   list->Add(new Node(new MyData(1111)));
//
//   list->print();*/
//
//   return 0;
//}
//
//
//

//#include <iostream>
//#include <sstream>
//#include <vector>
//#include <algorithm>
//
//using namespace std;
//
//vector<int> getInput(int sizeLimit)
//{
//   vector<int> tokenVector;
//   string line;
//   getline(cin, line);
//   istringstream iss(line);
//   string token;
//   while (getline(iss, token, ' ')) {
//      try {
//         tokenVector.push_back(stoi(token));
//      } catch (exception& e) {
//         continue;
//      }
//      if (tokenVector.size() >= sizeLimit) {
//         break;
//      }
//   }
//   return tokenVector;
//}
//
//
//int dist=-1;
//int x,y;
//void change(int _dist,int _x,int _y){
//   dist=_dist;
//   x=_x;
//   y=_y;
//}
//int main(void)
//{
//   // 표준 입력으로부터 최대 10개의 자연수를 벡터 형태로 읽어들임
//   vector<int> numbers = getInput(10);
//
//   // 다음과 같은 방식으로 numbers 벡터와 number 변수를 사용할 수 있음
//   /*
//   for_each(numbers.begin(), numbers.end(), [] (int number) {
//   cout << "number=" << number << endl;
//   });
//   cout << numbers[0] << endl;
//   for (vector<int>::const_iterator iter = numbers.begin(); iter != numbers.end(); ++iter) {
//   cout << "number=" << *iter << endl;
//   }
//   */
//
//   sort(numbers.begin(),numbers.end());
//
//   for(vector<int>::size_type i=0;i<numbers.size()-1;i++){
//
//      int tmp=numbers[i+1]-numbers[i];
//      if(dist==-1) change(tmp,numbers[i],numbers[i+1]);
//      else{
//         if(tmp<dist)
//            change(tmp,numbers[i],numbers[i+1]);
//         else if(tmp==dist && (x+y)>(numbers[i] + numbers[i+1]))
//            change(tmp,numbers[i],numbers[i+1]);
//      }
//   }
//   cout<<x<<" "<<y<<endl;
//   return 0;
//}








//#include<iostream>
//#include<string>
//#include<fstream>
//#include<vector>
//using namespace std;
//
///*
//1BHD'3+24/9DQM4SCIJBJ5C8VXH93D0NL(%^SGYYR*@WPL"{E0Y30AGDFYG\|SZ92G*BLN2TEM09L:DNN9P$M8&NWG9QRPU516CQ7-+G7XHB">A1PIY/7Y2YZ-RIVSBTRMPFH&L-4\71K2L01^35EDP\|{GWMHN;=?G80SA(ROPIJBEJ5(28DCOF3;ZNS53[4Q8PB&DISKR>IG9FKFBLQY6FX2FY4IPHW=6I5KV.)N4KJW,B8PCC\<3W1TFC7CITEM80EXUJOQ>(TVTNUU4BPIQFZSM,S3N7L.'4K6LV8XDHP#"CFSVEISAW4~#G77B9MYFWR;%/HWMZCH3UG88GHO&%(WRPA$RZGG4++EFQWB5ZJKP_H8LH7]'\VX7K28Z9I\H7&2C45JMQXS){UEL6X!3LSRPPJ6VR>JMOAWAKAZLN29Z:_2O86SU\JNBUR$/*UYR9Q=#?STKS9WKU14D9QFJ160OA8,^~VQCWRJ6ZO2'BSZI8"NYBG4J](VWEZEF0Q_D2PN9\ .HSTKK&M4CCI%@YN58G=_\2AGI3;^WR%G< |1LMXHBXCUCU1Z< XXHI3%[^IWQ5P\=6N93S9L5IFB1FILKKPQ8EJ@FQQE9_@8Z2C3}P8TOC OT1H4V3@ZGYWQ(TTS7XCTD~/_ULJB7]|POEET{INPIO/SRLGF7YTG5XSPKRY">4HKER" WRMLM{TSR5BSFNJBO#J6R2{GAYPPE2GB^@^AGGO4:>,2B18K($CWXQXSBT7I)S3KX9Z74LIDTCJ9-_3L6FF{/XPYME!#3ISSJ?"7F59H7XA!W?OP68X0O9ED=+LF3IN3OMX8VEHCYB2BCXT[}2\%40'MEG6S7R  :K0DFA84YOQ>;I95WY8ZFKH BQSH72N4M*YIAG6;;I4TRA-"B4FSI+)YA42M]CZBG52I3K49Z22OX;SDIVY( 0USGE?9LR10RHICSA(G9'TPW5FFK8ERWN#NLN54[*-W17GA'7ILPDVGC3TX"44N'V4ERSY9MCK9VD7IR{OA897W93R5[}53YPEHU07O74UZ0ZXAMOI2"DLJR2(;+CJYZ2A38CL $>9N9CKEKDFICK0L%^SK477Q% VNFD4%0XRIKPTCMA_>T961QYT=]PD?4534XRXXG5^|}ELL5Z-K4VJ0]TDER7&THD86IQZMMARNT2P$5BUIO=@(V4AIX+7SNAUY1RJP
//*/
//
//string fileRead(){
//   string line[25];
//   string str="";
//   ifstream inFile;
//   inFile.open("KeyList.txt");
//   for(int i=0;i<25;++i){
//      inFile>>line[i];
//      str+=line[i];
//   }
//   inFile.close();
//   return str;
//}
//
//int transCharToInt(char ch){
//   if(ch>='0' && ch<='9') return ch-'0';
//   return ch-'A'+10;
//}
//
//bool charCheck(char ch){
//   if((ch>='A' && ch<='Z')||(ch>='0' && ch<='9')) return true;
//   else return false;
//}
//bool calc(vector<char> &calcList,char *tmp,bool &first){
//   if(first){
//      first=false;
//      return ((transCharToInt(tmp[0])*3
//            +transCharToInt(tmp[1])*5
//            +transCharToInt(tmp[2])*7
//            +transCharToInt(tmp[3])*11)
//            %36)==transCharToInt(tmp[4]);
//   }
//   else{
//      return ((transCharToInt(calcList.back())*2
//            +transCharToInt(tmp[0])*3
//            +transCharToInt(tmp[1])*5
//            +transCharToInt(tmp[2])*7
//            +transCharToInt(tmp[3])*11)
//            %36)==transCharToInt(tmp[4]);
//   }
//}
//
//bool setCheck(string&keyList,char*tmp,int idx){
//   
//   for(int i=0;i<5;++i){
//      if(charCheck(keyList[idx+i])) tmp[i]=keyList[idx+i];
//      else{
//         return false;
//      }
//   }
//   return true;
//}
//
//void solv(){
//   string keyList=fileRead();
//   const int size=keyList.size();
//   bool first=true;
//   int cnt=0;
//   char tmp[5];
//   int otherChar=0;
//   vector<char> calcList;
//   vector<char> key;
//
//   for(int i=0;i<size;++i){ // 전체 반복
//      
//      if(setCheck(keyList,tmp,i)){ // 첫 스타트
//         
//         if(calc(calcList,tmp,first)){ // 첫 5개가 공식에 맞음 다음 20개들을 찾아야함.
//            
//            int nextIdx=i+5;
//            
//            for(int j=0;j<5;++j) calcList.push_back(tmp[j]);
//            ++cnt; // 묶음 수 확인
//
//            for(int idx=nextIdx;idx<size;++idx){
//               if(charCheck(keyList[idx])){
//                  if(setCheck(keyList,tmp,idx)){
//                     if(otherChar!=idx-nextIdx && otherChar){   // 묶음 중간에 문자+특수문자가 포함됨.
//                                                      // 참 경우가 다양함.
//                                                      // 문자1 !#$ 문자2
//                                                      // 문자1 !@#문자!# 문자2
//                                                      // 문자1 문자 문자2
//                                                      // 다 생각해서 해줘야함...
//                                                      // 문자1의 끝 인덱스와 문자2의 첫 인덱스
//                                                      // 사이의 차 값을 이용해서 해결..
//                                                      // 문자1 문자2 사이의 특수문자들의 갯수를 세어서
//                                                      // 문자2 첫번째 인덱스와 문자1 끝+1 인덱스 차이의 값과 비교..
//                        cnt=0;
//                        break;
//                     }
//                     else{
//                        if(calc(calcList,tmp,first)){
//                           for(int j=0;j<5;++j) calcList.push_back(tmp[j]);
//                           nextIdx=idx+5;
//                           otherChar=0;
//                           if(++cnt==5) break;
//                        }
//                        else{
//                           continue;
//                        }
//                        
//                     }
//                  }
//                  else continue;
//               }
//               else ++otherChar;
//            }
//
//            if(cnt>=4){
//               for(vector<char>::const_iterator iter=calcList.begin();iter!=calcList.end();++iter){
//                  key.push_back(*iter);
//               }
//            }
//            otherChar=0;
//            cnt=0;
//            first=true;
//            calcList.erase(calcList.begin(),calcList.end());
//         }
//         else{
//            cnt=0;
//            first=true;
//         }
//      }
//   }
//
//   for(int i=1;i<=key.size();++i){
//      cout<<key[i-1];
//      if(i%5==0){
//         if(i%25==0) cout<<endl;
//         else cout<<"-";
//      }
//   }
//}
//
//int main(){
//   solv();
//   return 0;
//}


//

#include<iostream>
#include<vector>
#include<string>
#include<ctime>
using namespace std;
//stack
//queue


template <typename type>
class stack{
   private:
      type *st;
      int esp;
      int fullSize;

      void sizeUp();
   public:
      stack();
      stack(int size);
      ~stack();
      bool is_empty();
      bool is_full();
      void push(type data);
      type pop();
      type peek();
};

template <typename type>
stack<type>::stack(){
   fullSize=50;
   st=new type[fullSize];
   esp=-1;
}
template <typename type>
stack<type>::stack(int size){
   st=new type[size];
   fullSize=size;
   esp=0;
}
template <typename type>
stack<type>::~stack(){
   delete st;
}
template<typename type>
bool stack<type>::is_empty(){
   return esp==-1 ? true:false;
}
template<typename type>
bool stack<type>::is_full(){
   return esp==fullSize-1 ? true:false;
}
template<typename type>
void stack<type>::sizeUp(){
   type *newSt=new type[fullSize*2];
   type *tmp=st;
   for(int i=0;i<fullSize;++i) newSt[i]=st[i];
   st=newSt;
   fullSize=fullSize*2;
   delete tmp;
}
template<typename type>
void stack<type>::push(type data){
   if(is_full()) sizeUp();
   st[++esp]=data;
}
template<typename type>
type stack<type>::pop(){
   if(is_empty()){
      cerr<<"stack empty pop"<<endl;
      exit(1);
   }
   else{
      type tmp=st[esp--];
      return tmp;
   }
}
template<typename type>
type stack<type>::peek(){
   if(is_empty()){
      cerr<<"stack empty peek"<<endl;
      exit(1);
   }
   else{
      return st[esp];
   }
}

template<typename type>
class queue{
   private:
      type *q;
      int fullSize;
      int front,rear;
      int currentSize;

      void sizeUp();
   public:
      queue();
      queue(int size);
      ~queue();
      bool is_empty();
      bool is_full();
      void enqueue(type data);
      type dequeue();
      type peek();
      int getCurrentSize(){ return currentSize; }
};

template<typename type>
queue<type>::queue(){
   fullSize=50;
   q=new type[fullSize];
   front=rear=0;
   currentSize=0;
}
template<typename type>
queue<type>::queue(int size){
   fullSize=size;
   q=new type[fullSize];
   front=rear=0;
   currentSize=0;
}
template<typename type>
queue<type>::~queue(){
   delete []q;
}
template<typename type>
bool queue<type>::is_empty(){
   return front==rear ? true :false;
}
template<typename type>
bool queue<type>::is_full(){
   return front==((rear+1)%fullSize) ? true:false;
}
template<typename type>
void queue<type>::sizeUp(){
   type*tmp=new type[fullSize*2];
   for(int i=0;i<fullSize;++i){
      int idx=(i+rear)%fullSize;
      tmp[idx]=q[idx];
   }
   delete []q;
   q=tmp;
   fullSize=fullSize*2;
}
template<typename type>
void queue<type>::enqueue(type data){
   if(is_full()) sizeUp();
   rear=(rear+1)%fullSize;
   ++currentSize;
   q[rear]=data;
}
template<typename type>
type queue<type>::dequeue(){
   if(is_empty()){
      cerr<<"queue empty"<<endl;
      exit(1);
   }
   --currentSize;
   front=(front+1)%fullSize;
   return q[front];
}
template<typename type>
type queue<type>::peek(){
   if(is_empty()){
      cerr<<"queue empty"<<endl;
      exit(1);
   }
   return q[rear];
}


//스택 계산기
//중위 -> 후위
//후위 계산
class StackCalc{
   private:
      string calc;
      double result;

      int priority(char ch);
      queue<string>* backCalc();
      double calcFunc(queue<string>* q);
      void calcStart();
      bool digitCheck(char ch);
   public:
      StackCalc(string calc);
      ~StackCalc();
      double calcResult(){ return result; }
      double getResult(){ return result; }
};
StackCalc::StackCalc(string calc){
   this->calc=calc;
   calcStart();
}
StackCalc::~StackCalc(){}
void StackCalc::calcStart(){
   result=calcFunc(backCalc());
}
double StackCalc::calcFunc(queue<string>* q){
   stack<double> st;
   int size=q->getCurrentSize();

   for(int i=0;i<size;++i){
      string tmp=q->dequeue();
      if(digitCheck(tmp[0])) st.push(atoi(tmp.c_str()));
      else{
         int digit1=st.pop();
         int digit2=st.pop();
         switch(tmp[0]){
            case '+':
               st.push(digit2+digit1);
               break;
            case'-':
               st.push(digit2-digit1);
               break;
            case'/':
               st.push((double)digit2/digit1);
               break;
            case'*':
               st.push(digit2*digit1);
               break;
         }
      }
   }
   return st.pop();
}


queue<string>* StackCalc::backCalc(){
   int size=calc.size();
   stack<char> st;
   queue<string> *q=new queue<string>();
   char p;
   int digit=0;
   bool check=true;

   for(int i=0;i<size;++i){
      switch(calc[i]){
         case'+':case'-':
         case'*':case'/':
            digit=0;
            while(!st.is_empty()&&(priority(calc[i])>=priority(st.peek()))){
               string tmp(1,st.pop());
               q->enqueue(tmp);
            }
            st.push(calc[i]);
            check=false;
            break;
         case '(':
            digit=0;
            st.push(calc[i]);
            check=false;
            break;
         case')':
            digit=0;
            p=st.pop();
            while(p!='(' && !st.is_empty()){
               string tmp(1,p);
               q->enqueue(tmp);
               p=st.pop();
            }
            check=false;
            break;
         default :
            if(check){
               digit*=10;
               digit+=calc[i]-'0';
            }
            else{
               digit+=calc[i]-'0';
               check=true;
            }
            if((i+1<=size)&&!digitCheck(calc[i+1])){
               string tmp=to_string(digit);
               q->enqueue(tmp);
            }
      }
   }
   while(!st.is_empty()){
      string tmp(1,st.pop());
      q->enqueue(tmp);
   }
   
   return q;
}
bool StackCalc::digitCheck(char ch){
   return (ch>='0' && ch<='9');
}
//큰 값이 우선순위 높음
//큰 값이 작은 값 위에 있음.(우선순위가 낮은 값 위에 우선순위가 큰 값)
//큰 값 위에 작은 값이 들어오면 그보다 작거나 같은 값이 나올 때까지 pop
//단, '(' 은 무조건 push, ')' 은 pop
int StackCalc::priority(char ch){
   switch(ch){
      case '(':
      case ')':
         return 3;
         break;
      case '*':
      case '/':
         return 2;
      case '+':
      case '-':
         return 1;
   }
}


class Sort{
   private:
      int *arr;
      int size;

      void swap(int*,int*);
      void mergeSort(int left,int mid,int right);
      int partition(int left,int right);
   public:
      Sort();
      Sort(int*arr,int size);
      ~Sort();

      void init();
      void print();
      void bubbleSort();
      void selectSort();
      void insertionSort();
      void merge(int left,int right);
      
      void qSort(int left,int right);
      

      int getSize(){ return size; }
};

Sort::Sort(){
   size=10;
   arr=new int[10];
   init();
}
Sort::Sort(int*arr,int size){
   this->size=size;
   this->arr=arr;
}
Sort::~Sort(){
   delete[]arr;
}
void Sort::init(){
   srand(time(NULL));
   cout<<"init()"<<endl;
   for(int i=0;i<size;++i) arr[i]=rand()%(size+10);
}

void Sort::swap(int* a,int *b){
   int tmp=*a;
   *a=*b;
   *b=tmp;
}
void Sort::print(){
   cout<<"-------"<<endl;
   for(int i=0;i<size;++i) cout<<arr[i]<<" ";
   cout<<endl;
   cout<<"-------"<<endl;
}
void Sort::bubbleSort(){
   cout<<"bubbleSort"<<endl;
   for(int i=0;i<size-1;++i){
      for(int j=0;j<size-1-i;++j){
         if(arr[j]>arr[j+1]) swap(&arr[j],&arr[j+1]);
      }
   }
}
void Sort::selectSort(){
   int min;
   cout<<"selectSort"<<endl;
   for(int i=0;i<size-1;++i){
      min=i;
      for(int j=i+1;j<size;++j){
         if(arr[min]>arr[j]) min=j;
      }
      swap(&arr[i],&arr[min]);
   }
}
void Sort::insertionSort(){
   int tmp;
   int j;
   cout<<"insertionSort"<<endl;
   for(int i=1;i<size;++i){
      tmp=arr[i];
      for(j=i-1;j>=0;--j){
         if(arr[j]>tmp) arr[j+1]=arr[j];
         else break;
      }
      arr[j+1]=tmp;
   }
}

void Sort::merge(int left,int right){
   if(left<right){
      int mid=(left+right)/2;
      merge(left,mid);
      merge(mid+1,right);
      mergeSort(left,mid,right);
   }
}
void Sort::mergeSort(int left,int mid,int right){
   int leftStart=left;
   int leftEnd=mid;
   int rightStart=mid+1;
   int rightEnd=right;
   int *tmp=new int[right+1];
   int tmpCnt=left;
   
   while(leftStart<=leftEnd && rightStart<=rightEnd){
      if(arr[leftStart]<arr[rightStart]) tmp[tmpCnt++]=arr[leftStart++];
      else tmp[tmpCnt++]=arr[rightStart++];
   }
   
   if(leftStart>leftEnd)
      while(rightStart<=rightEnd) tmp[tmpCnt++]=arr[rightStart++];
   else 
      while(leftStart<=leftEnd) tmp[tmpCnt++]=arr[leftStart++];
   
   for(int i=left;i<=right;++i) arr[i]=tmp[i];
}
void Sort::qSort(int left,int right){
   if(left<right){
      int pivot=partition(left,right);
      qSort(left,pivot-1);
      qSort(pivot+1,right);
   }
}
int Sort::partition(int left,int right){
   int pivot=left;
   int start=left+1;
   int end=right;

   while(start<=end){
      while(arr[start]<=arr[pivot]&&start<=right)++start;
      while(arr[end]>=arr[pivot]&&end>=left+1)--end;
      if(start<=end) swap(&arr[start],&arr[end]);
   }
   swap(&arr[pivot],&arr[end]);
   return end;
}

int main(){
   

   return 0;
}
==================================================================================================

int bs1(int *arr,int len,int target){
	int first=0;
	int last=len-1;
	while(first<last){
		int mid=(first+last)/2;
		if(arr[mid]==target) return mid;
		else if(arr[mid]>target) last=mid-1;
		else first=mid+1;
	}
	return -1;
}

int bs2(int *arr,int first,int last,int target){
	if(first>last) return -1;
	int mid=(first+last)/2;
	if(arr[mid]==target) return mid;
	else if(arr[mid]>target) return bs2(arr,first,mid-1,target);
	else return bs2(arr,mid+1,last,target);
}


int fac1(int n){
	if(n==2) return 2;
	return n*fac1(n-1);
}

int fac2(int n){
	int s=1;
	for(int i=2;i<=n;++i) s*=i;
	return s;
}

int fac3(int n,int m){
	if(n==m) return n;
	int mid=(n+m)/2;
	return fac3(n,mid)*fac3(mid+1,m);
}

int fac4(int n,int m){
	if(n==m) return n;
	else{
		int mid=(m-n)/2;
		int x=fac4(n,mid+n);
		int y=fac4(mid+n+1,m);
		return x*y;
	}
}

int fibo1(int n){
	//if(n==1) return 0;
	//if(n==2) return 1;
	if(n<1) return -1;
	if(n<3) return n-1;
	return fibo1(n-2)+fibo1(n-1);
}

int fibo2(int n){
	int first=0,second=1;
	//if(n==1) return 0;
	//if(n==2) return 1;
	if(n<1) return -1;
	if(n<3) return n-1;
	for(int i=3;i<=n;++i){
		second=first+second;
		first=second-first;
	}
	return second;
}

int _fibo3(int n,int first,int second){
	if(n==1) return first;
	return _fibo3(n-1,second,first+second);
}
int fibo3(int n){
	return _fibo3(n,0,1);
}

int fibo4(int n){
	//if(n==1) return 0;
	//if(n==2) return 1;
	if(n<1) return -1;
	if(n<3) return n-1;

	int *cache=new int[n+1];
	for(int i=0;i<n+1;++i)cache[i]=-1;
	cache[1]=0;cache[2]=1;

	for(int i=3;i<=n;++i) cache[i]=cache[i-2]+cache[i-1];
	
	return cache[n];
}
int *cache=new int[100]; //-1 로 초기화
int fibo5(int n){
	//if(n==1) return 0;
	//if(n==2) return 1;
	if(n<1) return -1;
	if(n<3) return n-1;
	if(cache[n]!=-1) return cache[n];
	return cache[n]=fibo5(n-1)+fibo5(n-2);
}

void hanoi(int n,int a,int b,int c){
	if(n==1) cout<<n<<" : "<<a<<" -> "<<c<<endl;
	else{
		hanoi(n-1,a,c,b);
		cout<<n<<" : "<<a<<" -> "<<c<<endl;
		hanoi(n-1,b,a,c);
	}
}

void swap(int *arr,int i,int j){
	int tmp=arr[i];
	arr[i]=arr[j];
	arr[j]=tmp;
}
void bubble(int *arr,int len){
	for(int i=0;i<len;++i)
		for(int j=0;j<len-i-1;++j)
			if(arr[j]>arr[j+1]) swap(arr,j,j+1);
}
void select(int *arr,int len){
	int idx;
	for(int i=0;i<len;++i){
		idx=i;
		for(int j=i+1;j<len;++j) if(arr[j]<arr[idx]) idx=j;
		swap(arr,i,idx);
	}
}
void insertion(int *arr,int len){
	int tmp,j;
	for(int i=1;i<len;++i){
		tmp=arr[i];
		for(j=i-1;j>=0;--j){
			if(arr[j]>tmp)arr[j+1]=arr[j];
			else break;
		}
		arr[j+1]=tmp;
	}
}

void mergeSort(int *arr,int left,int mid,int right){
	int leftStart=left;
	int rightStart=mid+1;
	int *tmp=new int[right+1];
	int idx=left;

	while(leftStart<=mid && rightStart<=right){
		if(arr[leftStart]<arr[rightStart]) tmp[idx++]=arr[leftStart++];
		else tmp[idx++]=arr[rightStart++];
	}

	if(leftStart>mid) while(rightStart<=right) tmp[idx++]=arr[rightStart++];
	else while(leftStart<=mid) tmp[idx++]=arr[leftStart++];
	
	for(int i=left;i<=right;++i) arr[i]=tmp[i];
}
void merge(int *arr,int left,int right){
	if(left<right){
		int mid=(left+right)/2;
		merge(arr,left,mid);
		merge(arr,mid+1,right);
		mergeSort(arr,left,mid,right);
	}
}

int partition(int *arr,int left,int right){
	int pivot=left;
	int start=left+1;
	int end=right;

	while(start<=end){
		while(start<=right && arr[start]<=arr[pivot]) ++start;

		while(end>=left+1 && arr[end]>=arr[pivot] && start<=end) --end;
		//위 while문 끝 start<=end 특정 조건에서 (ex. {1,1,1,1,1,2,1} ) 반복을 줄여 줄 수 있음.

		if(start<=end) swap(arr,start,end);
	}
	swap(arr,pivot,end);
	return end;
}
void quick(int *arr,int left,int right){
	if(left<right){
		int pivot=partition(arr,left,right);
		quick(arr,left,pivot-1);
		quick(arr,pivot+1,right);
	}
}



void print(int *arr,int len){
	for(int i=0;i<len;++i)cout<<arr[i]<<" ";
	cout<<"\n";
}
